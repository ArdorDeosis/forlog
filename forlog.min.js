'use strict';function ForlogGrammar(){function b(p){return p=p.replace(/\\n/g,'\n'),p=p.replace(/\\t/g,'\t'),p}function d(p){function q(){for(let v=[],w='',x='',y=null;0<t.length;){if(y=t.shift(),x+=y,''==w&&null!==y.match(/[A-Z]/)||''!=w&&null!==y.match(/[A-Za-z0-9_$%&!?]/))w+=y;else if('|'===y||']'===y){if(''===w)return g(`ERROR: call to nameless Rule`),k.errorReturnString;if(!h.hasOwnProperty(w))return g(`ERROR: call to unknown Rule '${w}'`),k.errorReturnString;v=v.concat(h[w]),w=''}else return g(`ERROR: illegal character '${y}' in rule call`),k.errorReturnString;if(']'===y){if(0<v.length){let z=v[Math.floor(Math.random()*v.length)];return z}return g(`ERROR: rule call produces no outcomes: ${'['+x}`),k.errorReturnString}}}function r(){for(let v='',w=null;0<t.length;)if(w=t.shift(),''==v&&null!==w.match(/[a-z]/)||''!=v&&null!==w.match(/[A-Za-z0-9_$%&!?]/))v+=w;else return'}'===w?''===v?(g(`ERROR: call to nameless Variable;`),k.errorReturnString):j.hasOwnProperty(v)?j[v]:(g(`ERROR: call to unknown Variable '${v}'`),k.errorReturnString):(g(`ERROR: illegal character '${w}' in variable call`),k.errorReturnString)}function s(){let v=[''],w=0,x=null;for(;0<t.length;)if(x=t.shift(),p+=x,'<'===x)++w;else if('>'!==x)0==w&&'|'===x?v[v.length]='':v[v.length-1]+=x;else if(0>--w)break;let y=v.shift();if(''===y)g(`ERROR: call to nameless command`);else if(!o.hasOwnProperty(y))g(`ERROR: call to unknown command '${y}'`);else{for(let z=0;z<v.length;++z)v[z]='~'===v[z].charAt(0)?v[z].substr(1,Infinity):d(v[z]);return d(o[y](v))}}p===void 0&&(p='[START_SYMBOL]');let t=p.split(''),u='';for(;0<t.length;){let v=t.shift();if('\\'===v){u+=v+t.shift();continue}else u+='['===v?d(q()):'{'===v?d(r()):'<'===v?s():v}return u}function g(p){if(k.logToConsole){let q=(p.match(/%c/g)||[]).length,r=[p];for(let s=0;s<q;++s)r[s+1]=0==s%2?'font-style:italic;':'font-style:normal;';console.log.apply(null,r)}}let h={};this.getRules=function(){return h};let j={};this.getVariables=function(){return j};let k={overrideRules:!1,keepVariables:!1,logToConsole:!0,errorReturnString:'ERROR'};this.getSettings=function(){return k};this.getVersion=function(){return'2.0'};let m={hasEnoughArguments:function(p,q,r){return!(r<q)||(g(`ERROR: not enough arguments in %c${p}%c command; expected ${q}, found ${r}`),!1)},isInt:function(p,q){return!isNaN(parseInt(q))||(g(`ERROR: argument '${q}' in %c${p}%c command is not a number`),!1)},isNonNegativeInt:function(p,q){return m.isInt(p,q)&&0>parseInt(q)?(g(`ERROR: argument '${q}' in %c${p}%c command is not a number â‰¥ 0'`),!1):!0},isVariableName:function(p,q){return null!==q.match(/[a-z][A-Za-z0-9_$%&!?]*/)||(g(`ERROR: argument '${q}' in %c${p}%c command is not a valid variable name`),!1)}},o={set:function(p){return m.hasEnoughArguments('set',2,p.length)&&m.isVariableName('set',p[0])?(j[d(p[0])]=d(p[1]),''):k.errorReturnString},'set?':function(p){return m.hasEnoughArguments('set?',2,p.length)&&m.isVariableName('set?',p[0])?(j.hasOwnProperty(p[0])||(j[d(p[0])]=d(p[1])),''):k.errorReturnString},eq:function(p){if(!m.hasEnoughArguments('eq',3,p.length)||!m.isInt('eq',p[0])||!m.isInt('eq',p[1]))return k.errorReturnString;return p[0]==p[1]?p[2]:3<p.length?p[3]:''},lt:function(p){if(!m.hasEnoughArguments('lt',3,p.length)||!m.isInt('lt',p[0])||!m.isInt('lt',p[1]))return k.errorReturnString;return p[0]<p[1]?p[2]:3<p.length?p[3]:''},leq:function(p){if(!m.hasEnoughArguments('leq',3,p.length)||!m.isInt('leq',p[0])||!m.isInt('leq',p[1]))return k.errorReturnString;return p[0]<=p[1]?p[2]:3<p.length?p[3]:''},gt:function(p){if(!m.hasEnoughArguments('gt',3,p.length)||!m.isInt('gt',p[0])||!m.isInt('gt',p[1]))return k.errorReturnString;return p[0]>p[1]?p[2]:3<p.length?p[3]:''},geq:function(p){if(!m.hasEnoughArguments('geq',3,p.length)||!m.isInt('geq',p[0])||!m.isInt('geq',p[1]))return k.errorReturnString;return p[0]>=p[1]?p[2]:3<p.length?p[3]:''},'for':function(p){return m.hasEnoughArguments('for',2,p.length)&&m.isNonNegativeInt('for',p[0])?Array(parseInt(p[0])).fill(p[1]).join(''):k.errorReturnString},rnd:function(p){return m.hasEnoughArguments('rnd',2,p.length)&&m.isInt('rnd',p[0])&&m.isInt('rnd',p[0])?k.errorReturnString:Array(parseInt(p[0])).fill(p[1]).join('')}};this.getCommands=function(){return o},this.compileGrammar=function(p){console.groupCollapsed('compiling Forlog grammar');let q=0,r='START_SYMBOL';p=p.replace(/\/\*[^]*?\*\//g,'');let s=p.split('\n');for(let t=0;t<s.length;++t){let u=s[t].replace(/\/\/.*$/,''),v=null;if(v=u.match(/^[ \t]*([A-Z][A-Za-z0-9_$%&!?]*)[ \t]*$/),null!=v){r=v[1],k.overrideRules&&delete h[r];continue}if(v=u.match(/^[ \t]*(?:#[ \t]*([0-9]*)){0,1}[ \t]*>(.*)$/),null!=v){let w=parseInt(v[1]);for(isNaN(w)&&(w=1),h.hasOwnProperty(r)||(h[r]=[]);0<w--;)h[r][h[r].length]=v[2];continue}(v=u.match(/^[ \t]*$/),null==v)&&(++q,g(`line ${t} can not be parsed and is ignored.\nLine ${t}: %c${u.substr(0,24)}${24<u.length?'...':''}`))}g(`finished compiling; found ${q} unparsable lines`),console.groupEnd()},this.process=function(p){return k.keepVariables||(j={}),b(d(p))},this.addCommand=function(p,q){o[p]=q}}